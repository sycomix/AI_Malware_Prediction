import numpy as np
import random
import matplotlib.pyplot as plt

from numpy import argmax
from tensorflow.keras.models import load_model
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.datasets import mnist

(x_train, y_train), (x_test, y_test) = mnist.load_data()

x_train = x_train.astype("float32")
x_test = x_test.astype("float32")
x_train = np.reshape(x_train, (len(x_train), 28, 28, 1))
x_test = np.reshape(x_test, (len(x_test), 28, 28, 1))

y_train = to_categorical(y_train)
y_test = to_categorical(y_test)

#mnist data = 0 ~ 9 까지 이루어져 있는 dataset
print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

model = load_model(r"C:\Users\ssky1\PycharmProjects\Deep_Project\CNN_mnist.h5")
model.summary()

x_hat_idx = np.random.choice(x_train.shape[0], 60000)
x_hat = x_train[x_hat_idx]

yhat = model.predict_classes(x_hat)

result = 0
loss = 0
for i in range(60000):
    if str(argmax(y_train[x_hat_idx[i]])) == str(yhat[i]):
        result += 1
    else:
        loss += 1

print(f"result > {result}")
print(f"loss > {loss}")

prediction_result = model.predict(x_test)
prediction_labels = np.argmax(prediction_result, axis=-1)
test_label = np.argmax(y_test, axis=-1)

wrong_result = [
    n
    for n in range(0, len(test_label))
    if prediction_labels[n] != test_label[n]
]
sample = random.choices(population=wrong_result, k=16)

nrows = ncols= 4
plt.figure(figsize=(12, 8))

for count, n in enumerate(sample, start=1):
    plt.subplot(nrows, ncols, count)
    plt.imshow(x_test[n].reshape(28, 28), cmap="Greys", interpolation="nearest")
    tmp = f"Label:{str(test_label[n])}, Prediction:{str(prediction_labels[n])}"
    plt.title(tmp)

plt.tight_layout()
plt.show()