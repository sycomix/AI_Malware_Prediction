# import setting
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt

from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten
from tensorflow.keras.utils import to_categorical

# random seed 동일값 출력을 보장하기 위해서
seed = 777
np.random.seed(seed)
tf.random.set_seed(seed)

(x_train, y_train), (x_test, y_test) = mnist.load_data()

# 0 ~ 1 사이의 값을 나타내기위한 정규화
x_train = x_train.astype("float32") / 255.
x_test = x_test.astype("float32") / 255.

x_train = np.reshape(x_train, (len(x_train), 28, 28, 1))
x_test = np.reshape(x_test, (len(x_test), 28, 28, 1))
print("x_train dataset shape > {}".format(np.shape(x_train)))
print("x_test dataset shape > {}".format(np.shape(x_test)))

number_classes = 10
y_train = to_categorical(y_train, number_classes)
y_test = to_categorical(y_test, number_classes)
print("y_train dataset shape > {}".format(np.shape(y_train)))
print("y_test dataset shape > {}".format(np.shape(y_test)))

model = Sequential()
model.add(Conv2D(64, kernel_size=(3, 3), activation="relu", padding="same"))
model.add(MaxPooling2D(2, 2))
model.add(Conv2D(32, kernel_size=(3, 3), activation="relu", padding="same"))
model.add(MaxPooling2D(2, 2))
model.add(Conv2D(16, kernel_size=(3, 3), activation="relu", padding="same"))
model.add(MaxPooling2D(2, 2))
model.add(Conv2D(8, kernel_size=(3, 3), activation="relu", padding="same"))
model.add(Flatten())
model.add(Dense(128, activation="relu"))
model.add(Dropout(0.35))
model.add(Dense(20, activation="relu"))
model.add(Dense(10, activation="softmax"))
model.summary()

model.compile(optimizer="adam", loss="categorical_crossentropy", metrics=["acc"])
history = model.fit(x_train, y_train, epochs=5, batch_size=128,
                    validation_data=(x_test, y_test), validation_batch_size=128)

print("CNN MNIST TRAIN ACC > {}".format(model.evaluate(x_train, y_train)))
print("CNN MNIST TEST ACC > {}".format(model.evaluate(x_test, y_test)))
model.save("CNN_mnist.h5")
"""
visualization
"""
acc = history.history["acc"]
val_acc = history.history["val_acc"]

loss = history.history["loss"]
val_loss = history.history["val_loss"]

x_len = np.arange(len(loss))
plt.plot(x_len, acc, marker=".", c="blue", label="training-set acc")
plt.plot(x_len, val_acc, marker="^", c="red", label="val_acc-set acc")
plt.plot(x_len, loss, marker=".", c="blue", label="training_loss-set acc")
plt.plot(x_len, val_loss, marker="^", c="red", label="val_loss-set acc")
plt.legend(loc="best")
plt.grid()
plt.xlabel("epoch")
plt.ylabel("loss")
plt.show()

"""
질문... QnA 
""
